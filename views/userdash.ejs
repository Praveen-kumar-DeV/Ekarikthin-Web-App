<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.0/axios.min.js" 
    integrity="sha512-A6BG70odTHAJYENyMrDN6Rq+Zezdk+dFiFFN6jH1sB+uJT3SYMV4zDSVR+7VawJzvq7/IrT/2K3YWVKRqOyN0Q=="
     crossorigin="anonymous" referrerpolicy="no-referrer"></script>

 <link rel="stylesheet" href="adminstyle.css">
<style>
  


table {
  border-collapse: collapse;
  margin: 25px 0;
  font-size: 0.9em;
  font-family: sans-serif;
  min-width: 400px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
}
th,td {
    padding: 12px 15px;
}
 tr {
  border-bottom: 1px solid #dddddd;
}

 tr:nth-of-type(even) {
  background-color: #f3f3f3;
}

 tr:last-of-type {
  border-bottom: 2px solid #009879;
}
 th #expiry{
  color: red;
}
input[type=text] {
  float: left;
  padding: 6px;
  border: none;
  margin-top: 8px;
  margin-right: 16px;
  font-size: 17px;
}
button{
  width: auto;
  float: right;
  padding: 6px;
  color: #dddddd;;
  border: 1px white solid;
  background-color: rgb(3, 152, 88);
  border-radius: 8px;
  margin-top: 8px;
  margin-right: 130px;
  font-size: 17px;
  box-shadow: blueviolet;
}

#mytable tr td:nth-child(4) {
color: red;
font-weight:bold ;
}

/* When the screen is less than 600px wide, stack the links and the search field vertically instead of horizontally */
@media screen and (max-width: 600px) {
   input[type=text] {
    float: none;
    display: block;
    text-align: left;
    width: 100%;
    margin: 0;
    padding: 14px;
  }
   input[type=text] {
    border: 1px solid #ccc;
  }
}



  </style>
</head>
<body>

<div class="sidebar">
  <a class="active" href="#home">User Dashboard</a>
  <a onclick="erase()" href="/admin/logout">Logout</a>
  
</div>

<div class="content">
  <h2>REGISTRATION LIST..</h2>
 
  

  
  <div>
    <h2>Product Table</h2>
    <p>Key in your input to filter the table:</p>

    <input type="text" id="myinput" placeholder="Search..." title="Type in something">
    <button onClick="history.go(0);" style="display: flex;">Refresh Page</button>
    <br>

   

    <table>
      <thead><tr>
        <th><span id="name" class="w3-button table-column">S.NO <i class="caret"></i></span></th>
        <th><span id="name" class="w3-button table-column">Name <i class="caret"></i></span></th>
        <th><span id="quantity" class="w3-button table-column">Event<i class="caret"></i></span></th>
        <th><span id="price" class="w3-button table-column"> Email<i class="caret"></i></span></th>
        <th><span id="expiry" class="w3-button table-column" >TokenID <i class="caret"></i></span></th>
        <th><span id="paid" class="w3-button table-column">Payment Status <i class="caret"></i></span></th>
        <th><span id="phone" class="w3-button table-column">Phone <i class="caret"></i></span></th>
      </tr></thead>
      <tbody id="mytable"></tbody>
    </table>
  </div>
  

  

 
</div>

</body>

<script>
  let allregis;
  var ch=localStorage.getItem('user');
const user= JSON.parse(ch);

they(user);
  async function they(user){
    console.log(user);
const data = await axios.get('/admin/data',{
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${user.token}`,
          }, 
          
        }) .then((response) => {       
        
        allregis=response.data.result;
       

//---------------------------------------------------



 
var table = document.getElementById('mytable');
 var input = document.getElementById('myinput');
 
 var tableData=allregis
 
 

 
 var caretUpClassName = 'fa fa-caret-up';
 var caretDownClassName = 'fa fa-caret-down';
 
 const sort_by = (field, reverse, primer) => {
 
   const key = primer ?
     function(x) {
       return primer(x[field]);
     } :
     function(x) {
       return x[field];
     };
 
   reverse = !reverse ? 1 : -1;
 
   return function(a, b) {
     return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
   };
 };
 
 
 function clearArrow() {
   let carets = document.getElementsByClassName('caret');
   for (let caret of carets) {
     caret.className = "caret";
   }
 }
 
 
 function toggleArrow(event) {
   let element = event.target;
   let caret, field, reverse;
   if (element.tagName === 'SPAN') {
     caret = element.getElementsByClassName('caret')[0];
     field = element.id
   }
   else {
     caret = element;
     field = element.parentElement.id
   }
 
   let iconClassName = caret.className;
   clearArrow();
   if (iconClassName.includes(caretUpClassName)) {
     caret.className = `caret ${caretDownClassName}`;
     reverse = false;
   } else {
     reverse = true;
     caret.className = `caret ${caretUpClassName}`;
   }
 
   tableData.sort(sort_by(field, reverse));
   populateTable();
 }
 
 
 function populateTable() {
  var i=0;
   table.innerHTML = '';
   for (let data of tableData) {
     let row = table.insertRow(-1);
     let sno = row.insertCell(0);
     sno.innerHTML = ++i;
     let name = row.insertCell(1);
     name.innerHTML = data.name;
 
     let quantity = row.insertCell(2);
     quantity.innerHTML = data.event;
 
     let price = row.insertCell(3);
     price.innerHTML = data.email;
 
     let expiry = row.insertCell(4);
     expiry.innerHTML = data.tokenId;


     let paid = row.insertCell(5);
     paid.innerHTML = data.paid;


     let phone = row.insertCell(6);
     phone.innerHTML = data.phone;
   }
 
   filterTable();
 }
 
 
 function filterTable() {
   let filter = input.value.toUpperCase();
   rows = table.getElementsByTagName("TR");
   let flag = false;
 
   for (let row of rows) {
     let cells = row.getElementsByTagName("TD");
     for (let cell of cells) {
       if (cell.textContent.toUpperCase().indexOf(filter) > -1) {
         if (filter) {
           cell.style.backgroundColor = '#00D100';
         } else {
           cell.style.backgroundColor = '';
         }
 
         flag = true;
       } else {
         cell.style.backgroundColor = '';
       }
     }
 
     if (flag) {
       row.style.display = "";
     } else {
       row.style.display = "none";
     }
 
     flag = false;
   }
 }
 
 
 populateTable();
 
 let tableColumns = document.getElementsByClassName('table-column');
 
 for (let column of tableColumns) {
   column.addEventListener('click', function(event) {
     toggleArrow(event);
   });
 }
 
 input.addEventListener('keyup', function(event) {
   filterTable();
 });










//--------------------------------

      });}
     
    function erase(){
      window.localStorage.removeItem('user');
    }

  
 </script>

</html>

</head>
<body>

</body>
  